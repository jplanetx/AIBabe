// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  conversations Conversation[]
  subscription  Subscription?
}

model Girlfriend {
  id           String    @id @default(cuid())
  name         String
  description  String
  personality  String
  imageUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  conversations Conversation[]
}

model Conversation {
  id           String    @id @default(cuid())
  userId       String
  girlfriendId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  girlfriend   Girlfriend @relation(fields: [girlfriendId], references: [id], onDelete: Cascade)
}

model Message {
  id             String    @id @default(cuid())
  content        String
  isUserMessage  Boolean
  conversationId String
  createdAt      DateTime  @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String    @unique
  plan      String    @default("FREE")
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Memory {
  id           String    @id @default(cuid())
  key          String
  value        String
  conversationId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([key, conversationId])
}