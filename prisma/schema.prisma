generator client {
  provider     = "prisma-client-js"
  output       = "../node_modules/.prisma/client"
  relationMode = "prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  password      String?
  conversations Conversation[]
  subscription  Subscription?
  preferences   UserPreference[]
  feedbacks     Feedback[]
  memories      Memory[]
  userProfile   UserProfile?
userFacts              UserFact[]
  userSemanticPreferences UserSemanticPreference[]
}

model Girlfriend {
  id            String         @id @default(cuid())
  name          String
  description   String
  personality   String
  imageUrl      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
}

model Character {
  id            String   @id @default(cuid())
  name          String
  description   String
  personality   String
  image         String
  coverImage    String?
  bio           String
  interests     String?
  favoriteQuote String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Conversation {
  id           String               @id @default(cuid())
  userId       String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  girlfriendId String
  messages     Message[]
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  girlfriend   Girlfriend?          @relation(fields: [girlfriendId], references: [id], onDelete: Cascade)
  summary      ConversationSummary?
  feedbacks    Feedback[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  createdAt      DateTime     @default(now())
  content        String
  isUserMessage  Boolean
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String    @unique
  plan      String    @default("FREE")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  endDate   DateTime?
  startDate DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Memory {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  conversationId String
  key            String
  value          String
  userId         String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([key, conversationId])
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
}

model ConversationSummary {
  id             String       @id @default(cuid())
  conversationId String       @unique
  summary        String
  summarizedAt   DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Feedback {
  id              String       @id @default(cuid())
  conversationId  String
  userId          String?
  rating          Int
  optionalComment String?
  createdAt       DateTime     @default(now())
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([userId])
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  profileData     String
  lastUpdated     DateTime @default(now())
  confidenceScore Float    @default(0.5)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

enum SemanticPreferenceType {
  TONE
  TOPIC_AVOIDANCE
  INFO_DEPTH
  // Add other preference types as needed
}

model UserFact {
  id              String    @id @default(cuid())
  userId          String
  factText        String    @db.Text
  sourceSessionId String?   // Optional: ID of the session where this fact was learned
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserSemanticPreference {
  id               String                 @id @default(cuid())
  userId           String
  preferenceType   SemanticPreferenceType
  preferenceValue  String                 @db.Text
  sourceSessionId  String?                // Optional: ID of the session where this preference was learned/set
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, preferenceType])
}
